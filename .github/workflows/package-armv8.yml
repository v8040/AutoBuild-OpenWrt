name: Package OpenWrt for ARMv8

on:
  workflow_dispatch:
    inputs:
      source_branch:
        description: "Select the source branch"
        required: false
        default: "immortalwrt-21.02"
        type: choice
        options:
          - immortalwrt-21.02
          - immortalwrt-24.10
      openwrt_target:
        description: "Select device target"
        required: false
        default: "armv8"
        type: choice
        options:
          - armv8
      package_method:
        description: "Select package method"
        required: false
        default: "flippy"
        type: choice
        options:
          - flippy
          - ophub
      openwrt_board:
        description: "Select device board"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - h28k
          - s905d
      openwrt_kernel:
        description: "Select kernel version"
        required: false
        default: "6.12.y"
        type: choice
        options:
          - 5.4.y
          - 5.10.y
          - 5.15.y
          - 6.1.y
          - 6.6.y
          - 6.12.y
      auto_kernel:
        description: "Auto use the latest kernel"
        required: false
        default: true
        type: boolean

env:
  ROOTFS_RELEASE_TAG: ${{ inputs.openwrt_target }}
  OPENWRT_RELEASE_TAG: package
  TZ: Asia/Shanghai

jobs:
  Package:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id == github.event.sender.id }}

    steps:
    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization environment
      id: init
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q) 2>/dev/null
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo -E apt-get -y update
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        # sudo -E apt-get -y install $(curl -fsSL https://is.gd/depend_ubuntu2204_openwrt)
        # sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo rm -rf ~/{.cargo,.dotnet,.rustup}
        sudo timedatectl set-timezone "${TZ}"
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Create simulated physical disk
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R runner.runner /builder
        df -Th

    - name: Checkout
      uses: actions/checkout@main

    - name: Download Armvirt Firmware [${{ inputs.source_branch }}] [${{ inputs.openwrt_board }}] [${{ inputs.package_method }}] [${{ inputs.openwrt_kernel }}]
      id: down
      working-directory: /builder
      run: |
        ln -sf /builder/openwrt ${GITHUB_WORKSPACE}/openwrt
        FIRMWARE_PATH=openwrt/output
        [[ -d "${FIRMWARE_PATH}" ]] || mkdir -p ${FIRMWARE_PATH}
        FIRMWARE_URL=$(curl -s "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${{ env.ROOTFS_RELEASE_TAG }}" | grep -o '"browser_download_url": "[^"]*'"${{ inputs.source_branch }}"'.*rootfs\.tar\.gz"' | cut -d '"' -f 4)
        wget -q -P ${FIRMWARE_PATH} ${FIRMWARE_URL}
        cd ${FIRMWARE_PATH}
        df -hT ${PWD}
        ls -lh ${PWD}
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Package OpenWrt Firmware
      if: ${{ steps.down.outputs.status == 'success' && inputs.package_method == 'flippy' }}
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: openwrt/output/*rootfs.tar.gz
        PACKAGE_SOC: ${{ inputs.openwrt_board }}
        KERNEL_REPO_URL: ophub/kernel
        KERNEL_VERSION_NAME: ${{ inputs.openwrt_kernel }}
        KERNEL_AUTO_LATEST: ${{ inputs.auto_kernel }}
        WHOAMI: ${{ github.repository_owner }}

    - name: Package OpenWrt Firmware
      if: ${{ steps.down.outputs.status == 'success' && inputs.package_method == 'ophub' }}
      uses: ophub/amlogic-s9xxx-openwrt@main
      with:
        openwrt_path: openwrt/output/*rootfs.tar.gz
        openwrt_board: ${{ inputs.openwrt_board }}
        openwrt_kernel: ${{ inputs.openwrt_kernel }}
        auto_kernel: ${{ inputs.auto_kernel }}
        builder_name: ${{ github.repository_owner }}

    - name: Organize Files
      id: organize
      if: ${{ env.PACKAGED_STATUS == 'success' }}
      run: |
        cd ${{ env.PACKAGED_OUTPUTPATH }}
        rm -rf $(ls | grep -v -E "\.(img\.gz|img\.xz)$" | xargs) 2>/dev/null
        for file in *.img.gz; do
            kernel=$(echo "${file}" | sed -n 's/.*_\(\(k6\|k5\)\.[0-9]\+\)\.[0-9]\+.*/\1+/p')
            new_name=$(echo "${file}" | sed -E "s/R[0-9]+\.[0-9]+\.[0-9]+//g; s/__/_/g; s/openwrt/${{ inputs.source_branch }}/g; s/_k.*\.img\.gz/_${kernel}.img.gz/")
            [ -f "${file}" ] && mv -f "${file}" "${new_name}"
        done
        # for file in *.gz; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha256"; done
        df -hT ${PWD}
        ls -lh ${PWD}
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: Upload OpenWrt To Release
      if: ${{ steps.organize.outputs.status == 'success' }}
      uses: ncipollo/release-action@main
      with:
        name: v${{ env.PACKAGED_OUTPUTDATE }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*
        tag: ${{ env.OPENWRT_RELEASE_TAG }}
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
        removeArtifacts: true
        prerelease: true
        body: |
          > OpenWrt for ${{ inputs.openwrt_target }}
          ### 📒 固件信息
          - 🚀 自用版：集成插件不多，只有小猫咪，可按需在线安装插件
          - 💻 平台架构: ${{ inputs.openwrt_target }}
          - ⚽ 源码分支: ${{ inputs.source_branch }}
          - 💝 内核版本: ${{ inputs.openwrt_kernel }}
          - 🌐 默认地址: 10.10.10.1
          - 🔑 默认密码: password
          ### 🍻 安装与更新
          - 插件: 系统 → 晶晨宝盒 → 安装 OpenWrt → 选择型号 → 安装
          - 命令: `openwrt-install-amlogic`，`openwrt-update-amlogic`

    - name: Delete releases and workflows runs
      uses: ophub/delete-releases-workflows@main
      with:
        delete_releases: true
        releases_keep_latest: 4
        delete_workflows: true
        workflows_keep_day: 2
        gh_token: ${{ secrets.GITHUB_TOKEN }}